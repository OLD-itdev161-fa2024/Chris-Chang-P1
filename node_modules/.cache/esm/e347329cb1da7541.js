let express,connectDatabase,check,validationResult,cors,bcrypt,User;_b1d‍.w("express",[["default",["express"],function(v){express=v}]]);_b1d‍.w("./config/db",[["default",["connectDatabase"],function(v){connectDatabase=v}]]);_b1d‍.w("express-validator",[["check",["check"],function(v){check=v}],["validationResult",["validationResult"],function(v){validationResult=v}]]);_b1d‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_b1d‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_b1d‍.w("./models/User",[["default",["User"],function(v){User=v}]]);




//import jwt from 'jsonwebtoken';
//import config from 'config';




// Initialize express application
const app = express();

// Connect database
connectDatabase();

// Configure Middleware
app.use(express.json({ extended: false }));
app.use(
    cors({
        origin: 'http://localhost:3000'
    })
);

// API endpoints
/**
 * @route Get /
 * @desc Test endpoint
 */
app.get('/', (req, res) =>
    res.send('http get request sent to root api endpoint')
);

/**
 * @route POST api/users
 * @desc Register user
 */
app.post (
    '/api/users',
    [
        check('name', 'Please enter your name')
            .not()
            .isEmpty(),
        check('email', 'Please enter a valid email').isEmail(),
        check(
            'password',
            'Please enter a password with 6 or more characters'
        ).isLength({ min: 6 })
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(422).json({ errors: errors.array() });
        } else {
            const { name, email, password } = req.body;
            try {
                // Check if user exists
                let user = await User.findOne({ email: email });
                if (user) {
                    return res
                        .status(400)
                        .json({ errors: [{ msg: 'User already exists '}]})
                }

                // Create a new user
                user = new User ({
                    name: name,
                    email: email,
                    password: password
                });

                // Encrypt the password
                const salt = await bcrypt.genSalt(10);
                user.password = await bcrypt.hash(password, salt);

                // Save to the db and return
                await user.save();
                res.send('User successfully registered');
                // Generate and return a JWT token
                // const payload = {
                //     user: {
                //         id: user.id
                //     }
                // };

                // jwt.sign(
                //     payload,
                //     config.get('jwtSecret'),
                //     { expiresIn: '10hr' },
                //     (err, token) => {
                //         if (err) throw err;
                //         res.json({ token: token});
                //     }
                // );
                res.send('User successfully registered');
            } catch  (error) {
                res.status(500).send('Server error');
            }
        }
    }
);

// Connection listener
const port = 5000;
app.listen(port, () => console.log(`Express server running on port ${port}`));